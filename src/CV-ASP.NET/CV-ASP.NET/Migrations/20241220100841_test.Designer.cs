// <auto-generated />
using System;
using CV_ASP.NET.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CV_ASP.NET.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241220100841_test")]
    partial class test
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CV_ASP.NET.Models.Adress", b =>
                {
                    b.Property<int>("Aid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Aid"));

                    b.Property<string>("Anvid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Gatunamn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Postnummer")
                        .HasColumnType("int");

                    b.Property<string>("Stad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Aid");

                    b.HasIndex("Anvid")
                        .IsUnique();

                    b.ToTable("Adresser");
                });

            modelBuilder.Entity("CV_ASP.NET.Models.Anvandare", b =>
                {
                    b.Property<string>("Anvid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Anvandarnamn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Efternamn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Fornamn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ListadStartsida")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("PrivatProfil")
                        .HasColumnType("bit");

                    b.Property<string>("Profilbild")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Anvid");

                    b.ToTable("Anvandare");
                });

            modelBuilder.Entity("CV_ASP.NET.Models.CV", b =>
                {
                    b.Property<int>("Cvid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Cvid"));

                    b.Property<int?>("AntalBesokare")
                        .HasColumnType("int");

                    b.Property<string>("AnvandarNamn")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Beskrivning")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Profilbild")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Cvid");

                    b.HasIndex("AnvandarNamn")
                        .IsUnique()
                        .HasFilter("[AnvandarNamn] IS NOT NULL");

                    b.ToTable("CVs");
                });

            modelBuilder.Entity("CV_ASP.NET.Models.CV_Erfarenhet", b =>
                {
                    b.Property<int>("Cvid")
                        .HasColumnType("int");

                    b.Property<int>("Eid")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Slutdatum")
                        .HasColumnType("date");

                    b.Property<DateOnly>("Startdatum")
                        .HasColumnType("date");

                    b.HasKey("Cvid", "Eid");

                    b.HasIndex("Eid");

                    b.ToTable("CV_Erfarenhet");
                });

            modelBuilder.Entity("CV_ASP.NET.Models.CV_Utbildning", b =>
                {
                    b.Property<int>("CVid")
                        .HasColumnType("int");

                    b.Property<int>("Uid")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Slutdatum")
                        .HasColumnType("date");

                    b.Property<DateOnly>("Startdatum")
                        .HasColumnType("date");

                    b.HasKey("CVid", "Uid");

                    b.HasIndex("Uid");

                    b.ToTable("CV_Utbildning");
                });

            modelBuilder.Entity("CV_ASP.NET.Models.CV_kompetenser", b =>
                {
                    b.Property<int>("Cvid")
                        .HasColumnType("int");

                    b.Property<int>("Kid")
                        .HasColumnType("int");

                    b.HasKey("Cvid", "Kid");

                    b.HasIndex("Kid");

                    b.ToTable("CV_Kompetenser");
                });

            modelBuilder.Entity("CV_ASP.NET.Models.Erfarenhet", b =>
                {
                    b.Property<int>("Eid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Eid"));

                    b.Property<string>("Arbetsgivare")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Beskrivning")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Eid");

                    b.ToTable("Erfarenhet");
                });

            modelBuilder.Entity("CV_ASP.NET.Models.Kompetenser", b =>
                {
                    b.Property<int>("Kid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Kid"));

                    b.Property<string>("Beskrivning")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KompetensNamn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Kid");

                    b.ToTable("Kompetenser");
                });

            modelBuilder.Entity("CV_ASP.NET.Models.Meddelande", b =>
                {
                    b.Property<int>("Mid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Mid"));

                    b.Property<string>("AnonymAnvandare")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FranAnvandareId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Innehall")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Last")
                        .HasColumnType("bit");

                    b.Property<string>("TillAnvandareId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Mid");

                    b.HasIndex("FranAnvandareId");

                    b.HasIndex("TillAnvandareId");

                    b.ToTable("Meddelande");
                });

            modelBuilder.Entity("CV_ASP.NET.Models.Utbildning", b =>
                {
                    b.Property<int>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Uid"));

                    b.Property<string>("Beskrivning")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instutition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kurs_program")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uid");

                    b.ToTable("Utbildning");
                });

            modelBuilder.Entity("CV_ASP.NET.Models.Adress", b =>
                {
                    b.HasOne("CV_ASP.NET.Models.Anvandare", "anvandare")
                        .WithOne("Adress")
                        .HasForeignKey("CV_ASP.NET.Models.Adress", "Anvid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("anvandare");
                });

            modelBuilder.Entity("CV_ASP.NET.Models.CV", b =>
                {
                    b.HasOne("CV_ASP.NET.Models.Anvandare", "anvandare")
                        .WithOne("CV")
                        .HasForeignKey("CV_ASP.NET.Models.CV", "AnvandarNamn");

                    b.Navigation("anvandare");
                });

            modelBuilder.Entity("CV_ASP.NET.Models.CV_Erfarenhet", b =>
                {
                    b.HasOne("CV_ASP.NET.Models.CV", "cv")
                        .WithMany()
                        .HasForeignKey("Cvid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CV_ASP.NET.Models.Erfarenhet", "erfarenhet")
                        .WithMany("cv_Erfarenhet")
                        .HasForeignKey("Eid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cv");

                    b.Navigation("erfarenhet");
                });

            modelBuilder.Entity("CV_ASP.NET.Models.CV_Utbildning", b =>
                {
                    b.HasOne("CV_ASP.NET.Models.CV", "cv")
                        .WithMany()
                        .HasForeignKey("CVid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CV_ASP.NET.Models.Utbildning", "utbildning")
                        .WithMany("cv_Utbildning")
                        .HasForeignKey("Uid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cv");

                    b.Navigation("utbildning");
                });

            modelBuilder.Entity("CV_ASP.NET.Models.CV_kompetenser", b =>
                {
                    b.HasOne("CV_ASP.NET.Models.CV", "CV")
                        .WithMany()
                        .HasForeignKey("Cvid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CV_ASP.NET.Models.Kompetenser", "Kompetenser")
                        .WithMany("CV_kompetenser")
                        .HasForeignKey("Kid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CV");

                    b.Navigation("Kompetenser");
                });

            modelBuilder.Entity("CV_ASP.NET.Models.Meddelande", b =>
                {
                    b.HasOne("CV_ASP.NET.Models.Anvandare", "Frananvandare")
                        .WithMany("skickatMeddelande")
                        .HasForeignKey("FranAnvandareId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CV_ASP.NET.Models.Anvandare", "Tillanvandare")
                        .WithMany("TagitEmotMeddelande")
                        .HasForeignKey("TillAnvandareId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Frananvandare");

                    b.Navigation("Tillanvandare");
                });

            modelBuilder.Entity("CV_ASP.NET.Models.Anvandare", b =>
                {
                    b.Navigation("Adress");

                    b.Navigation("CV");

                    b.Navigation("TagitEmotMeddelande");

                    b.Navigation("skickatMeddelande");
                });

            modelBuilder.Entity("CV_ASP.NET.Models.Erfarenhet", b =>
                {
                    b.Navigation("cv_Erfarenhet");
                });

            modelBuilder.Entity("CV_ASP.NET.Models.Kompetenser", b =>
                {
                    b.Navigation("CV_kompetenser");
                });

            modelBuilder.Entity("CV_ASP.NET.Models.Utbildning", b =>
                {
                    b.Navigation("cv_Utbildning");
                });
#pragma warning restore 612, 618
        }
    }
}
